{
	"name": "Load_to_warehouse",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ghparkcluster",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "4b7ee99b-ba70-4a10-8de7-4aa44ef8247f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/56fbbfce-6dab-4d62-af16-ccd107f4d9d3/resourceGroups/DEV-EA-EASTUS-DF-RG/providers/Microsoft.Synapse/workspaces/healthdataws/bigDataPools/ghparkcluster",
				"name": "ghparkcluster",
				"type": "Spark",
				"endpoint": "https://healthdataws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ghparkcluster",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## World Health data to UK health data transformation and writing into delta table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import IntegerType, DoubleType\n",
					"\n",
					"\n",
					"schema_name = 'warehouse'\n",
					"table_name = 'uk_health_data'\n",
					"\n",
					"# Read from staging\n",
					"resultDF = spark.sql('SELECT year,health_exp as health_exp_percentage_gdp,life_expect, maternal_mortality,infant_mortality,neonatal_mortality, under_5_mortality   FROM `default`.`worldhealthdata` where country_code = \"GBR\"')\n",
					"\n",
					"# Convert 'year' column to integer\n",
					"resultDF = resultDF.withColumn(\"year\", resultDF[\"year\"].cast(IntegerType()))\n",
					"\n",
					"columns = [\"year\", \"health_exp_percentage_gdp\", \"life_expect\", \"maternal_mortality\", \"infant_mortality\", \"neonatal_mortality\", \"under_5_mortality\"]\n",
					"\n",
					"# Convert all other columns to double\n",
					"for col in columns[1:]:\n",
					"    resultDF = resultDF.withColumn(col, F.col(col).cast(DoubleType()))\n",
					"\n",
					"# Fill null values using window function\n",
					"for col in columns[1:]:\n",
					"    window_spec = Window.orderBy(\"year\").rowsBetween(Window.unboundedPreceding, Window.currentRow)\n",
					"    resultDF = resultDF.withColumn(col, F.last(F.col(col), ignorenulls=True).over(window_spec))\n",
					"\n",
					"\n",
					"\n",
					"# Create schema if does not exists \n",
					"spark_sql_schema_Create = f\"CREATE SCHEMA IF NOT EXISTS {schema_name};\"\n",
					"spark.sql(spark_sql_schema_Create)\n",
					"# Write as delta \n",
					"resultDF.write.format(\"delta\").mode(\"ignore\").saveAsTable(f\"{schema_name}.{table_name}\")\n",
					"# Select data \n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_health_data`\")\n",
					"\n",
					"df.show(24)\n",
					""
				],
				"execution_count": 18
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## GHED data for UK"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import IntegerType, DoubleType\n",
					"\n",
					"\n",
					"schema_name = 'warehouse'\n",
					"table_name = 'uk_ghed_data'\n",
					"\n",
					"# Read from staging\n",
					"resultDF = spark.sql('SELECT * FROM `default`.`ghed_data`')\n",
					"\n",
					"# Convert 'year' column to integer\n",
					"resultDF = resultDF.withColumn(\"year\", resultDF[\"year\"].cast(IntegerType()))\n",
					"\n",
					"\n",
					"# Create schema if does not exists \n",
					"spark_sql_schema_Create = f\"CREATE SCHEMA IF NOT EXISTS {schema_name};\"\n",
					"spark.sql(spark_sql_schema_Create)\n",
					"# Write as delta \n",
					"resultDF.write.format(\"delta\").mode(\"ignore\").saveAsTable(f\"{schema_name}.{table_name}\")\n",
					"# Select data \n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_ghed_data`\")\n",
					"\n",
					"df.show(24)"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Code used in GHED data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import IntegerType, DoubleType\n",
					"\n",
					"\n",
					"schema_name = 'warehouse'\n",
					"table_name = 'uk_ghed_data_codes'\n",
					"\n",
					"# Read from staging\n",
					"resultDF = spark.sql('SELECT * FROM `default`.`ghed_data_codes`')\n",
					"\n",
					"def sanitize_column_name(col_name, max_length=100):\n",
					"    \"\"\"\n",
					"    Replaces invalid characters with underscores and truncates long names.\n",
					"\n",
					"    Invalid characters: ' ,;{}()\\n\\t='\n",
					"    \"\"\"\n",
					"    invalid_chars = ' ,;{}()\\n\\t='\n",
					"    sanitized = ''.join('_' if c in invalid_chars else c for c in col_name)\n",
					"    sanitized = ''.join(c if c.isalnum() or c == '_' else '_' for c in sanitized) #Ensure only alnum and underscore are present.\n",
					"    return sanitized[:max_length]\n",
					"\n",
					"\n",
					"new_columns = [sanitize_column_name(col) for col in resultDF.columns]\n",
					"resultDF = resultDF.toDF(*new_columns)\n",
					"\n",
					"\n",
					"# Create schema if does not exists \n",
					"spark_sql_schema_Create = f\"CREATE SCHEMA IF NOT EXISTS {schema_name};\"\n",
					"spark.sql(spark_sql_schema_Create)\n",
					"# Write as delta \n",
					"resultDF.write.format(\"delta\").mode(\"ignore\").saveAsTable(f\"{schema_name}.{table_name}\")\n",
					"# Select data \n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_ghed_data_codes`\")\n",
					"\n",
					"df.show(24)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"schema_name = 'warehouse'\n",
					"table_name = 'uk_ghed_data_codes_v2'\n",
					"\n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_ghed_data_codes` where variable_code   in ('code'  \\\n",
					",'year'  \\\n",
					",'che_gdp'  \\\n",
					",'che_pc_usd'  \\\n",
					",'che'  \\\n",
					",'gghed'  \\\n",
					",'pvtd'  \\\n",
					",'ext'  \\\n",
					",'dom_che'  \\\n",
					",'gghed_che'  \\\n",
					",'pvtd_che'  \\\n",
					",'oops_che'  \\\n",
					",'vpp_che'  \\\n",
					",'gghed_gdp'  \\\n",
					",'gghed_gge'  \\\n",
					",'gghed_pc_usd'  \\\n",
					",'pvtd_pc_usd'  \\\n",
					",'oop_pc_usd'  \\\n",
					",'cfa_che'  \\\n",
					",'gfa_che'  \\\n",
					",'vfa_che'  \\\n",
					",'vhi_che'  \\\n",
					",'gge_gdp'  \\\n",
					",'gdp_pc_usd'  \\\n",
					",'fs'  \\\n",
					",'fs1'  \\\n",
					",'fs11'  \\\n",
					",'fs14'  \\\n",
					",'fs5'  \\\n",
					",'fs6'  \\\n",
					",'fs61'  \\\n",
					",'fs62'  \\\n",
					",'fs63'  \\\n",
					",'fs7'  \\\n",
					",'hf'  \\\n",
					",'hf1'  \\\n",
					",'hf11'  \\\n",
					",'hf2'  \\\n",
					",'hf21'  \\\n",
					",'hf22'  \\\n",
					",'hf23'  \\\n",
					",'hf3'  \\\n",
					",'gdp_ncu_pc'  \\\n",
					",'pfc_ncu_pc'  \\\n",
					",'gge_ncu_pc'  \\\n",
					",'fs_usd_pc'  \\\n",
					",'fs1_usd_pc'  \\\n",
					",'fs11_usd_pc'  \\\n",
					",'fs14_usd_pc'  \\\n",
					",'fs5_usd_pc'  \\\n",
					",'fs6_usd_pc'  \\\n",
					",'fs61_usd_pc'  \\\n",
					",'fs62_usd_pc'  \\\n",
					",'fs63_usd_pc'  \\\n",
					",'hf_usd_pc'  \\\n",
					",'hf1_usd_pc'  \\\n",
					",'hf11_usd_pc'  \\\n",
					",'hf2_usd_pc'  \\\n",
					",'hf21_usd_pc'  \\\n",
					",'hf22_usd_pc'  \\\n",
					",'hf23_usd_pc'  \\\n",
					",'hf3_usd_pc'  \\\n",
					",'pfc_usd_pc'  \\\n",
					",'gge_usd_pc'  \\\n",
					",'che_ppp_pc'  \\\n",
					",'gghed_ppp_pc'  \\\n",
					",'pvtd_ppp_pc'  \\\n",
					",'fs_ppp_pc'  \\\n",
					",'fs1_ppp_pc'  \\\n",
					",'fs11_ppp_pc'  \\\n",
					",'fs14_ppp_pc'  \\\n",
					",'fs5_ppp_pc'  \\\n",
					",'fs6_ppp_pc'  \\\n",
					",'fs61_ppp_pc'  \\\n",
					",'fs62_ppp_pc'  \\\n",
					",'fs63_ppp_pc'  \\\n",
					",'hf_ppp_pc'  \\\n",
					",'hf1_ppp_pc'  \\\n",
					",'hf11_ppp_pc'  \\\n",
					",'hf2_ppp_pc'  \\\n",
					",'hf21_ppp_pc'  \\\n",
					",'hf22_ppp_pc'  \\\n",
					",'hf23_ppp_pc'  \\\n",
					",'hf3_ppp_pc'  \\\n",
					",'gdp_ppp_pc'  \\\n",
					",'pfc_ppp_pc'  \\\n",
					",'gge_ppp_pc'  \\\n",
					",'pvtd_gdp'  \\\n",
					",'fs_gdp'  \\\n",
					",'fs1_gdp'  \\\n",
					",'fs11_gdp'  \\\n",
					",'fs5_gdp'  \\\n",
					",'fs6_gdp'  \\\n",
					",'fs61_gdp'  \\\n",
					",'fs62_gdp'  \\\n",
					",'hf_gdp'  \\\n",
					",'hf1_gdp'  \\\n",
					",'hf11_gdp'  \\\n",
					",'hf2_gdp'  \\\n",
					",'hf21_gdp'  \\\n",
					",'hf22_gdp'  \\\n",
					",'hf23_gdp'  \\\n",
					",'hf3_gdp'  \\\n",
					",'pfc_gdp'  \\\n",
					",'fs1_gge'  \\\n",
					",'fs11_gge'  \\\n",
					",'fs14_gge'  \\\n",
					",'hf11_gge'  \\\n",
					",'fs1_che'  \\\n",
					",'fs11_che'  \\\n",
					",'fs14_che'  \\\n",
					",'fs5_che'  \\\n",
					",'fs6_che'  \\\n",
					",'fs61_che'  \\\n",
					",'fs62_che'  \\\n",
					",'fs63_che'  \\\n",
					",'hf1_che'  \\\n",
					",'hf11_che'  \\\n",
					",'hf2_che'  \\\n",
					",'hf21_che'  \\\n",
					",'hf22_che'  \\\n",
					",'hf23_che'  \\\n",
					",'hf3_che'  \\\n",
					",'che_ncu2022'  \\\n",
					",'gghed_ncu2022'  \\\n",
					",'pvtd_ncu2022'  \\\n",
					",'ext_ncu2022'  \\\n",
					",'fs_ncu2022'  \\\n",
					",'fs1_ncu2022'  \\\n",
					",'fs11_ncu2022'  \\\n",
					",'fs14_ncu2022'  \\\n",
					",'fs5_ncu2022'  \\\n",
					",'fs6_ncu2022'  \\\n",
					",'fs61_ncu2022'  \\\n",
					",'fs62_ncu2022'  \\\n",
					",'fs63_ncu2022'  \\\n",
					",'fs7_ncu2022'  \\\n",
					",'hf_ncu2022'  \\\n",
					",'hf1_ncu2022'  \\\n",
					",'hf11_ncu2022'  \\\n",
					",'hf2_ncu2022'  \\\n",
					",'hf21_ncu2022'  \\\n",
					",'hf22_ncu2022'  \\\n",
					",'hf23_ncu2022'  \\\n",
					",'hf3_ncu2022'  \\\n",
					",'gdp_ncu2022'  \\\n",
					",'pfc_ncu2022'  \\\n",
					",'gge_ncu2022'  \\\n",
					",'che_usd2022'  \\\n",
					",'gghed_usd2022'  \\\n",
					",'pvtd_usd2022'  \\\n",
					",'ext_usd2022'  \\\n",
					",'fs_usd2022'  \\\n",
					",'fs1_usd2022'  \\\n",
					",'fs11_usd2022'  \\\n",
					",'fs14_usd2022'  \\\n",
					",'fs5_usd2022'  \\\n",
					",'fs6_usd2022'  \\\n",
					",'fs61_usd2022'  \\\n",
					",'fs62_usd2022'  \\\n",
					",'fs63_usd2022'  \\\n",
					",'fs7_usd2022'  \\\n",
					",'hf_usd2022'  \\\n",
					",'hf1_usd2022'  \\\n",
					",'hf11_usd2022'  \\\n",
					",'hf2_usd2022'  \\\n",
					",'hf21_usd2022'  \\\n",
					",'hf22_usd2022'  \\\n",
					",'hf23_usd2022'  \\\n",
					",'hf2nec_usd2022'  \\\n",
					",'hf3_usd2022'  \\\n",
					",'gdp_usd2022'  \\\n",
					",'pfc_usd2022'  \\\n",
					",'gge_usd2022'  \\\n",
					",'che_ncu2022_pc'  \\\n",
					",'gghed_ncu2022_pc'  \\\n",
					",'pvtd_ncu2022_pc'  \\\n",
					",'fs_ncu2022_pc'  \\\n",
					",'fs1_ncu2022_pc'  \\\n",
					",'fs11_ncu2022_pc'  \\\n",
					",'fs14_ncu2022_pc'  \\\n",
					",'fs5_ncu2022_pc'  \\\n",
					",'fs6_ncu2022_pc'  \\\n",
					",'fs61_ncu2022_pc'  \\\n",
					",'fs62_ncu2022_pc'  \\\n",
					",'fs63_ncu2022_pc'  \\\n",
					",'hf_ncu2022_pc'  \\\n",
					",'hf1_ncu2022_pc'  \\\n",
					",'hf11_ncu2022_pc'  \\\n",
					",'hf2_ncu2022_pc'  \\\n",
					",'hf21_ncu2022_pc'  \\\n",
					",'hf22_ncu2022_pc'  \\\n",
					",'hf23_ncu2022_pc'  \\\n",
					",'hf3_ncu2022_pc'  \\\n",
					",'gdp_ncu2022_pc'  \\\n",
					",'pfc_ncu2022_pc'  \\\n",
					",'gge_ncu2022_pc'  \\\n",
					",'che_usd2022_pc'  \\\n",
					",'gghed_usd2022_pc'  \\\n",
					",'pvtd_usd2022_pc'  \\\n",
					",'fs_usd2022_pc'  \\\n",
					",'fs1_usd2022_pc'  \\\n",
					",'fs11_usd2022_pc'  \\\n",
					",'fs14_usd2022_pc'  \\\n",
					",'fs5_usd2022_pc'  \\\n",
					",'fs6_usd2022_pc'  \\\n",
					",'fs61_usd2022_pc'  \\\n",
					",'fs62_usd2022_pc'  \\\n",
					",'fs63_usd2022_pc'  \\\n",
					",'hf_usd2022_pc'  \\\n",
					",'hf1_usd2022_pc'  \\\n",
					",'hf11_usd2022_pc'  \\\n",
					",'hf2_usd2022_pc'  \\\n",
					",'hf21_usd2022_pc'  \\\n",
					",'hf22_usd2022_pc'  \\\n",
					",'hf23_usd2022_pc'  \\\n",
					",'hf3_usd2022_pc'  \\\n",
					",'pfc_usd2022_pc'  \\\n",
					",'gge_usd2022_pc')\")\n",
					"\n",
					"\n",
					"# Create schema if does not exists \n",
					"spark_sql_schema_create = f\"CREATE SCHEMA IF NOT EXISTS {schema_name};\"\n",
					"spark.sql(spark_sql_schema_create)\n",
					"# Write as delta \n",
					"df.write.format(\"delta\").mode(\"overwrite\").saveAsTable(f\"{schema_name}.{table_name}\")\n",
					"# Select data \n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_ghed_data_codes_v2`\")\n",
					"\n",
					"df.show(10)"
				],
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.sql(\"select  count(*) FROM `warehouse`.`uk_ghed_data_codes_v2`\")\n",
					"df.show()"
				],
				"execution_count": 25
			}
		]
	}
}