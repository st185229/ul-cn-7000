{
	"name": "Load_to_staging",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ghparkcluster",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "cd75b5ac-703c-4baa-9da8-bb1b432e39e0"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/56fbbfce-6dab-4d62-af16-ccd107f4d9d3/resourceGroups/DEV-EA-EASTUS-DF-RG/providers/Microsoft.Synapse/workspaces/healthdataws/bigDataPools/ghparkcluster",
				"name": "ghparkcluster",
				"type": "Spark",
				"endpoint": "https://healthdataws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ghparkcluster",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Loading data from sources to staging tables"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Load files to staging tables from Azure object/blob store\r\n",
					"## If it already exists, then it skips\r\n",
					"## It then stores into delta table in parquet format "
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"# Define the storage account and container\r\n",
					"storage_account_name = \"distributedanalytics\"\r\n",
					"container_name = \"healthdata-fs\"\r\n",
					"directory_path = \"data\"\r\n",
					"\r\n",
					"# Define the full path in which raw CSVs are placed\r\n",
					"full_path = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/{directory_path}\"\r\n",
					"\r\n",
					"\r\n",
					"fs  = sc._jvm.org.apache.hadoop.fs.FileSystem.get(sc._jsc.hadoopConfiguration())\r\n",
					"\r\n",
					"# List files\r\n",
					"path = sc._jvm.org.apache.hadoop.fs.Path(full_path)\r\n",
					"files = fs.listStatus(path)\r\n",
					"# Display the files\r\n",
					"for file in files:\r\n",
					"    file_name = file.getPath().getName()\r\n",
					"    if file_name.endswith(\".csv\"):\r\n",
					"        # Read the CSV file into a DataFrame\r\n",
					"        print(f\"the file is {full_path}/{file_name}\")\r\n",
					"        df = spark.read.option(\"header\", \"true\").csv(f\"{full_path}/{file_name}\")\r\n",
					"\r\n",
					"\r\n",
					"        # Define the Delta Lake table path\r\n",
					"        delta_table_path = f\"abfss://{container_name}@{storage_account_name}.dfs.core.windows.net/delta/{file_name.replace('.csv', '')}\"\r\n",
					"         # Check if the Delta table already exists\r\n",
					"        if not fs.exists(sc._jvm.org.apache.hadoop.fs.Path(delta_table_path)):\r\n",
					"            # Read the CSV file into a DataFrame\r\n",
					"            df = spark.read.option(\"header\", \"true\").csv(f\"{full_path}/{file_name}\")\r\n",
					"            df.write.format(\"delta\").mode(\"overwrite\").option(\"delta.columnMapping.mode\", \"name\").save(delta_table_path)\r\n",
					"            delta_df = spark.read.format(\"delta\").load(delta_table_path)\r\n",
					"\r\n",
					"\r\n",
					"            table_name = file_name.replace('.csv', '')\r\n",
					"            # Write data to Lake database table\r\n",
					"            delta_df.write.format(\"parquet\").saveAsTable(f\"default.{table_name}\")\r\n",
					"\r\n",
					"\r\n",
					"            print(f\"Delta Lake table created for {file_name} at {delta_table_path}\")\r\n",
					"        else:\r\n",
					"            print(f\"Delta Lake table already exists for {file_name}, skipping...\")\r\n",
					"            \r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Listing of all tables"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"all_tables = spark.sql(\"SHOW TABLES\").collect()\r\n",
					"delta_tables = []\r\n",
					"\r\n",
					"for table in all_tables:\r\n",
					"    table_full_name = f\"{table.tableName}\"\r\n",
					"    print(table_full_name)\r\n",
					"    if DeltaTable.isDeltaTable(spark, table_full_name):\r\n",
					"        delta_tables.append(table_full_name)\r\n",
					"\r\n",
					"for delta_table in delta_tables:\r\n",
					"    print(delta_table)\r\n",
					"\r\n",
					""
				],
				"execution_count": 3
			}
		]
	}
}