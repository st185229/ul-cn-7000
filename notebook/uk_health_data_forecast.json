{
	"name": "uk_health_data_forecast",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ghparkcluster",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c5e1d573-e87e-4527-9ad3-8315785b7d0e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/56fbbfce-6dab-4d62-af16-ccd107f4d9d3/resourceGroups/DEV-EA-EASTUS-DF-RG/providers/Microsoft.Synapse/workspaces/healthdataws/bigDataPools/ghparkcluster",
				"name": "ghparkcluster",
				"type": "Spark",
				"endpoint": "https://healthdataws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ghparkcluster",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## ARIMA"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"from pyspark.sql import functions as F\n",
					"from pyspark.sql.types import IntegerType, DoubleType\n",
					"from pyspark.sql.window import Window\n",
					"import pandas as pd\n",
					"import statsmodels.api as sm\n",
					"\n",
					"schema_name = 'warehouse'\n",
					"table_name = 'uk_health_data'\n",
					"table_name_forecast = 'uk_health_data_forecast_arima'\n",
					"\n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_health_data`\")\n",
					"\n",
					"# Fill null values for forecasting (simplest approach, consider more sophisticated methods)\n",
					"columns = [\"year\", \"health_exp_percentage_gdp\", \"life_expect\", \"maternal_mortality\", \"infant_mortality\", \"neonatal_mortality\", \"under_5_mortality\"]\n",
					"\n",
					"\n",
					"df.show(24)\n",
					"\n",
					"\n",
					"# Forecasting function\n",
					"def forecast_column(pdf, column_name, forecast_years=5):\n",
					"    pdf = pdf.sort_values(by=\"year\")\n",
					"    time_series = pd.Series(pdf[column_name].values, index=pd.to_datetime(pdf[\"year\"], format='%Y'))\n",
					"    time_series.index.freq = 'YS' #Set the frequency after creation\n",
					"\n",
					"    try:\n",
					"        model = sm.tsa.ARIMA(time_series, order=(1, 1, 1)) # Example order\n",
					"        model_fit = model.fit()\n",
					"        forecast = model_fit.forecast(steps=forecast_years)\n",
					"        forecast_df = pd.DataFrame({\"year\": forecast.index.year, f\"{column_name}_forecast\": forecast.values})\n",
					"        return forecast_df\n",
					"    except Exception as e:\n",
					"        print(f\"Error forecasting {column_name}: {e}\")\n",
					"        return pd.DataFrame()\n",
					"\n",
					"# Forecast each column\n",
					"forecast_results = None\n",
					"forecast_years = 5\n",
					"start_year = df.agg(F.max(\"year\")).collect()[0][0] + 1\n",
					"forecast_years_range = range(start_year, start_year + forecast_years)\n",
					"\n",
					"for column in columns[1:]:  # Skip 'year'\n",
					"    result = df.toPandas() #convert to pandas to then be able to pass to forecast_column\n",
					"    forecast = forecast_column(result, column, forecast_years)\n",
					"\n",
					"    if forecast is not None and not forecast.empty:\n",
					"        if forecast_results is None:\n",
					"            forecast_results = forecast\n",
					"        else:\n",
					"            forecast_results = pd.merge(forecast_results, forecast, on=\"year\", how=\"outer\")\n",
					"\n",
					"# Convert back to PySpark DataFrame\n",
					"if forecast_results is not None:\n",
					"    forecast_spark_df = spark.createDataFrame(forecast_results)\n",
					"    forecast_spark_df.show()\n",
					"forecast_spark_df.write.format(\"delta\").mode(\"ignore\").saveAsTable(f\"{schema_name}.{table_name_forecast}\")\n",
					""
				],
				"execution_count": 23
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Machine Learning - Regression"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"jupyter": {
						"outputs_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"\n",
					"import pandas as pd\n",
					"from sklearn.linear_model import LinearRegression\n",
					"import numpy as np\n",
					"\n",
					"# Load data from the Spark SQL table\n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_health_data`\").toPandas()\n",
					"\n",
					"# Fill missing values with the mean of the column\n",
					"df = df.fillna(df.mean())\n",
					"\n",
					"# Features and target variables\n",
					"X = df[['year']]\n",
					"y_health_exp = df['health_exp_percentage_gdp']\n",
					"y_life_expect = df['life_expect']\n",
					"y_maternal_mortality = df['maternal_mortality']\n",
					"y_infant_mortality = df['infant_mortality']\n",
					"y_neonatal_mortality = df['neonatal_mortality']\n",
					"y_under_5_mortality = df['under_5_mortality']\n",
					"\n",
					"# Create and train the model for each target variable\n",
					"model_health_exp = LinearRegression().fit(X, y_health_exp)\n",
					"model_life_expect = LinearRegression().fit(X, y_life_expect)\n",
					"model_maternal_mortality = LinearRegression().fit(X, y_maternal_mortality)\n",
					"model_infant_mortality = LinearRegression().fit(X, y_infant_mortality)\n",
					"model_neonatal_mortality = LinearRegression().fit(X, y_neonatal_mortality)\n",
					"model_under_5_mortality = LinearRegression().fit(X, y_under_5_mortality)\n",
					"\n",
					"# Predict for the next five years\n",
					"future_years = pd.DataFrame({'year': [2023, 2024, 2025, 2026, 2027]})\n",
					"\n",
					"pred_health_exp = model_health_exp.predict(future_years)\n",
					"pred_life_expect = model_life_expect.predict(future_years)\n",
					"pred_maternal_mortality = model_maternal_mortality.predict(future_years)\n",
					"pred_infant_mortality = model_infant_mortality.predict(future_years)\n",
					"pred_neonatal_mortality = model_neonatal_mortality.predict(future_years)\n",
					"pred_under_5_mortality = model_under_5_mortality.predict(future_years)\n",
					"\n",
					"# Print predictions\n",
					"for i in range(len(future_years)):\n",
					"    print(f\"Year: {future_years.iloc[i, 0]}\")\n",
					"    print(f\"Health Expenditure (% GDP): {pred_health_exp[i]}\")\n",
					"    print(f\"Life Expectancy: {pred_life_expect[i]}\")\n",
					"    print(f\"Maternal Mortality: {pred_maternal_mortality[i]}\")\n",
					"    print(f\"Infant Mortality: {pred_infant_mortality[i]}\")\n",
					"    print(f\"Neonatal Mortality: {pred_neonatal_mortality[i]}\")\n",
					"    print(f\"Under-5 Mortality: {pred_under_5_mortality[i]}\")\n",
					"    print(\"\\n\")\n",
					"\n",
					"# Create a DataFrame with the predictions\n",
					"predictions_df = pd.DataFrame({\n",
					"    'year': future_years['year'],\n",
					"    'health_exp_percentage_gdp': pred_health_exp,\n",
					"    'life_expect': pred_life_expect,\n",
					"    'maternal_mortality': pred_maternal_mortality,\n",
					"    'infant_mortality': pred_infant_mortality,\n",
					"    'neonatal_mortality': pred_neonatal_mortality,\n",
					"    'under_5_mortality': pred_under_5_mortality\n",
					"})\n",
					"\n",
					"# Convert the predictions DataFrame to a Spark DataFrame\n",
					"predictions_spark_df = spark.createDataFrame(predictions_df)\n",
					"\n",
					"# Write the predictions to a Delta table\n",
					"predictions_spark_df.write.format(\"delta\").mode(\"ignore\").saveAsTable(\"`warehouse`.`uk_health_data_forecast_ml`\")\n",
					"\n",
					""
				],
				"execution_count": 22
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Correlation matrix"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\n",
					"\n",
					"\n",
					"import pandas as pd\n",
					"from matplotlib import pyplot as plt\n",
					"import seaborn as sns\n",
					"\n",
					"# Load data from the Spark SQL table\n",
					"df = spark.sql(\"SELECT * FROM `warehouse`.`uk_health_data`\").toPandas()\n",
					"\n",
					"# Fill missing values with the mean of the column\n",
					"df = df.fillna(df.mean())\n",
					"corr = df.corr()\n",
					"\n",
					"plt.figure(figsize=(12,8))\n",
					"sns.heatmap(corr, cmap=\"Greens\",annot=True)\n",
					"c1 = corr.abs().unstack()\n",
					"c1.sort_values(ascending = False)\n",
					"corr[corr < 1].unstack().transpose()\\\n",
					"    .sort_values( ascending=False)\\\n",
					"    .drop_duplicates()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## UK_Health_expenditure_data_full"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\n",
					"from pyspark.sql.functions import col, first\n",
					"\n",
					"\n",
					"# Load the data\n",
					"resultDF = spark.read.load('abfss://healthdata-fs@distributedanalytics.dfs.core.windows.net/data/uk_expenditure_data.csv', format='csv', header=True)\n",
					"\n",
					"# Select the columns to be transposed\n",
					"indicators = resultDF.columns[1:]  # Assuming the first column is the indicator names\n",
					"\n",
					"# Create a new DataFrame with the transposed data\n",
					"transposedDF = resultDF.selectExpr(\"stack(\" + str(len(indicators)) + \", \" + \", \".join([\"'\" + col + \"', \" + col for col in indicators]) + \") as (Indicator, Year, Value)\")\n",
					"\n",
					"# Pivot the DataFrame\n",
					"pivotDF = transposedDF.groupBy(\"Year\").pivot(\"Indicator\").agg(first(\"Value\"))\n",
					"\n",
					"# Display the transposed DataFrame\n",
					"display(pivotDF)\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					"\n",
					""
				],
				"execution_count": 24
			}
		]
	}
}