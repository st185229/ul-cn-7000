{
	"name": "staging_data_analysis",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ghparkcluster",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "64a82926-ed2e-444b-afa2-a823f4aeb3a9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/56fbbfce-6dab-4d62-af16-ccd107f4d9d3/resourceGroups/DEV-EA-EASTUS-DF-RG/providers/Microsoft.Synapse/workspaces/healthdataws/bigDataPools/ghparkcluster",
				"name": "ghparkcluster",
				"type": "Spark",
				"endpoint": "https://healthdataws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ghparkcluster",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"\r\n",
					"## Current Health Expenditure (CHE) In million constant (2022) US$\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`nhaindicators`\")\r\n",
					"\r\n",
					"#df = spark.read.load('abfss://healthdata-fs@distributedanalytics.dfs.core.windows.net/data/Current Health Expenditure (CHE) as % Gross Domestic Product (GDP).csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					"#, header=True\r\n",
					"#)\r\n",
					"\r\n",
					"# select  un-necessary columns to remove\r\n",
					"cols_to_drop = [df.columns[0], df.columns[2]] \r\n",
					"\r\n",
					"# Drop the specified columns\r\n",
					"df = df.drop(*cols_to_drop) \r\n",
					"df.show(truncate=False)\r\n",
					"\r\n",
					"\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"df_transposed = pandas_df.set_index('Indicators').T\r\n",
					"\r\n",
					"df_transposed.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"plt.show()\r\n",
					"\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Current Health Expenditure (CHE) -In million constant (2022) US$ ( Standarised based on USD 2022 to accomodate Inflation)- revenue from health care financilin schemes"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"#df = spark.read.load('abfss://healthdata-fs@distributedanalytics.dfs.core.windows.net/data/CHE_In million constant_2022_USD.csv', format='csv'\r\n",
					"## If header exists uncomment line below\r\n",
					"#, header=True\r\n",
					"#)\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`cheinmillionconstant2022usd`\")\r\n",
					"\r\n",
					"df.show(truncate=False)\r\n",
					"\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"df_transposed = pandas_df.set_index('Indicators').T\r\n",
					"\r\n",
					"df_transposed.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"plt.show()"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"EDA NHS FUNDING SOURCES"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql.functions import monotonically_increasing_id,col, struct, when, isnan, cast \r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`nhaindicators`\")\r\n",
					"\r\n",
					"# select  un-necessary columns to remove\r\n",
					"cols_to_drop = [df.columns[0], df.columns[2]] \r\n",
					"\r\n",
					"# Drop the specified columns\r\n",
					"df = df.drop(*cols_to_drop) \r\n",
					"df.show(truncate=False)\r\n",
					"\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"df_transposed = pandas_df.set_index('Indicators').T\r\n",
					"\r\n",
					"df_transposed.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"# Customize plot\r\n",
					"plt.title('Health Expenditure source of funds NHS')\r\n",
					"plt.xlabel('Year')\r\n",
					"plt.ylabel('Expenditure In million constant (2022) US$')\r\n",
					"plt.xticks(rotation=45)\r\n",
					"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\r\n",
					"\r\n",
					"plt.show()\r\n",
					""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## CHE - Current Health Expenses as percentage of GDP"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`cheaspercentgdp`\")\r\n",
					"df.show(10)\r\n",
					"\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"df_transposed = pandas_df.set_index('Indicators').T\r\n",
					"\r\n",
					"df_transposed.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"# Customize plot\r\n",
					"plt.title('Current Health Expenditure (CHE) as % Gross Domestic Product (GDP)')\r\n",
					"plt.xlabel('Year')\r\n",
					"plt.ylabel('CHE percentage GDP')\r\n",
					"plt.xticks(rotation=45)\r\n",
					"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\r\n",
					"\r\n",
					"plt.show()\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## CHE per capita USD"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`chepercapitausd`where SpatialDimValueCode='GBR' order by Period  \")\r\n",
					"\r\n",
					"df.show(25)\r\n",
					"\r\n",
					"\r\n",
					"# select  un-necessary columns to remove\r\n",
					"cols_to_drop = [df.columns[0], df.columns[1], df.columns[2],df.columns[5]] \r\n",
					"\r\n",
					"# Drop the specified columns\r\n",
					"df = df.drop(*cols_to_drop) \r\n",
					"\r\n",
					"df.show(25)\r\n",
					"\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"#df_transposed = pandas_df.set_index('Indicators').T\r\n",
					"##\r\n",
					"\r\n",
					"pandas_df = pandas_df.set_index('Period')\r\n",
					"\r\n",
					"\r\n",
					"pandas_df.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"\r\n",
					"# Customize plot\r\n",
					"plt.title('Current Health Expenditure per capita USD')\r\n",
					"plt.xlabel('Period')\r\n",
					"plt.ylabel('CHE per capta in USD-2022')\r\n",
					"plt.xticks(rotation=45)\r\n",
					"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\r\n",
					"\r\n",
					"plt.show()\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Doctors in UK - https://www.who.int/data/gho/data/indicators"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`doctorsuk` where SpatialDimValueCode = 'GBR'  and IndicatorCode = 'HWF_0002' and Period > 1999 order by Period\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# select  un-necessary columns to remove\r\n",
					"cols_to_drop = [df.columns[0], df.columns[1], df.columns[2],df.columns[3],df.columns[4],df.columns[6],df.columns[8],df.columns[9]] \r\n",
					"\r\n",
					"# Drop the specified columns\r\n",
					"df = df.drop(*cols_to_drop) \r\n",
					"\r\n",
					"df.show(100)\r\n",
					"\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"#df_transposed = pandas_df.set_index('Indicators').T\r\n",
					"##\r\n",
					"\r\n",
					"pandas_df = pandas_df.set_index('Period')\r\n",
					"\r\n",
					"pandas_df.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"\r\n",
					"# Customize plot\r\n",
					"plt.title('Number of medics per 10,000 population')\r\n",
					"plt.xlabel('Period')\r\n",
					"plt.ylabel('Number of doctors')\r\n",
					"plt.xticks(rotation=45)\r\n",
					"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\r\n",
					"\r\n",
					"plt.show()\r\n",
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## General government expenditure (GGE)-In million constant (2022) US$"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`gceinmillionconstant2022usd`\")\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"df_transposed = pandas_df.set_index('Indicators').T\r\n",
					"\r\n",
					"display(df_transposed)\r\n",
					"\r\n",
					"df_transposed.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"\r\n",
					"# Customize plot\r\n",
					"plt.title('General government expenditure (GGE)-In million constant (2022) US$')\r\n",
					"plt.xlabel('Year')\r\n",
					"plt.ylabel('GCE in Millions')\r\n",
					"plt.xticks(rotation=45)\r\n",
					"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\r\n",
					"\r\n",
					"plt.show()"
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Worldbank data - gDP per capita"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`gdppercapitaworldbank` where `Country Code` = 'GBR'\")\r\n",
					"\r\n",
					"# select  un-necessary columns to remove\r\n",
					"cols_to_drop = [df.columns[0], df.columns[1], df.columns[2]] \r\n",
					"\r\n",
					"# Drop the specified columns\r\n",
					"df = df.drop(*cols_to_drop) \r\n",
					"\r\n",
					"# convery spark df to pandas\r\n",
					"pandas_df = df.toPandas()\r\n",
					"\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"pandas_df = pandas_df.rename(columns={'Indicator Code': 'Year'})\r\n",
					"\r\n",
					"df_transposed = pandas_df.set_index('Year').T\r\n",
					"\r\n",
					"\r\n",
					"df_transposed.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"\r\n",
					"# Customize plot\r\n",
					"plt.title('GDP per capita (current US$)')\r\n",
					"plt.xlabel('Year')\r\n",
					"plt.ylabel('GDP per capita')\r\n",
					"plt.xticks(rotation=45)\r\n",
					"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\r\n",
					"\r\n",
					"plt.show()\r\n",
					"\r\n",
					""
				],
				"execution_count": 8
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Life expectancy at 60 based on male, female and both sex"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"import pandas as pd\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`lifeexpectancybirthand60` where `Country Code` = 'GBR' and FactValueNumeric >= 60 and Period >= 1999 and Sex5 = 'SEX_BTSX' order by Period\")\r\n",
					"\r\n",
					"# select  un-necessary columns to remove\r\n",
					"cols_to_drop = [df.columns[0], df.columns[1], df.columns[3], df.columns[4], df.columns[5]] \r\n",
					"\r\n",
					"# Drop the specified columns\r\n",
					"df = df.drop(*cols_to_drop) \r\n",
					"\r\n",
					"df.show(23, False)\r\n",
					"\r\n",
					"pandas_df = df.toPandas()\r\n",
					"# as it is loaded from csv,Identify the columns that need to be converted to numeric\r\n",
					"columns_to_convert = list(pandas_df.columns)[1:]\r\n",
					"\r\n",
					"# Convert the specified columns to numeric\r\n",
					"for col in columns_to_convert:\r\n",
					"    pandas_df[col] = pd.to_numeric(pandas_df[col], errors='coerce')\r\n",
					"\r\n",
					"pandas_df = pandas_df.set_index('Period')\r\n",
					"\r\n",
					"pandas_df.plot(kind='bar', stacked=True, figsize=(12, 6))\r\n",
					"\r\n",
					"\r\n",
					"# Customize plot\r\n",
					"plt.title('Average life expectancy of UK population')\r\n",
					"plt.xlabel('year')\r\n",
					"plt.ylabel('life expectancy at 60')\r\n",
					"plt.xticks(rotation=45)\r\n",
					"plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\r\n",
					"\r\n",
					"plt.show()"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## UK Primary Health Expenses"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"from pyspark.sql import functions as F\r\n",
					"df = spark.sql('SELECT * FROM `default`.`phcexpendituretrends` where Countries like \"%United%\"')\r\n",
					"df.show(10)\r\n",
					"# select  un-necessary columns to remove\r\n",
					"cols_to_drop = [df.columns[1]] \r\n",
					"# Drop the specified columns\r\n",
					"df = df.drop(*cols_to_drop) \r\n",
					"df.show(10)\r\n",
					"\r\n",
					"# Get the year columns dynamically\r\n",
					"year_columns = [col for col in df.columns if col != \"Countries\"]\r\n",
					"\r\n",
					"# Create the stack expression dynamically\r\n",
					"stack_expr = \"stack(\" + str(len(year_columns)) + \", \"\r\n",
					"\r\n",
					"for year_col in year_columns:\r\n",
					"    stack_expr += f\"'{year_col}', `{year_col}`, \"\r\n",
					"stack_expr = stack_expr[:-2] + \") as (Year, Value)\" #Remove trailing comma and space and close stack expression\r\n",
					"\r\n",
					"# Transpose the DataFrame\r\n",
					"transposed_df = df.select(\"Countries\", F.expr(stack_expr)).where(\"Value is not null\")\r\n",
					"\r\n",
					"# Rename the \"Year\" column\r\n",
					"transposed_df = transposed_df.withColumnRenamed(\"Countries\", \"Category\")\r\n",
					"\r\n",
					"# Transpose the DataFrame\r\n",
					"transposed_df = df.select(\"Countries\", F.expr(stack_expr)).where(\"Value is not null\")\r\n",
					"\r\n",
					"transposed_df = transposed_df.drop(*[transposed_df.columns[0]] ) \r\n",
					"\r\n",
					"transposed_df.show(10)\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## UK GDP price index (100 in 2022)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`ukgdppriceindex2022is100` order by Indicators\")\r\n",
					"df.show(10)\r\n",
					"\r\n",
					"# Get the year columns dynamically\r\n",
					"year_columns = [col for col in df.columns if col != \"Indicators\"]\r\n",
					"\r\n",
					"# Create the stack expression dynamically\r\n",
					"stack_expr = \"stack(\" + str(len(year_columns)) + \", \"\r\n",
					"\r\n",
					"for year_col in year_columns:\r\n",
					"    stack_expr += f\"'{year_col}', `{year_col}`, \"\r\n",
					"stack_expr = stack_expr[:-2] + \") as (Year, Value)\" #Remove trailing comma and space and close stack expression\r\n",
					"\r\n",
					"# Transpose the DataFrame\r\n",
					"transposed_df = df.select(\"Indicators\", F.expr(stack_expr)).where(\"Value is not null\")\r\n",
					"\r\n",
					"# Rename the \"Year\" column\r\n",
					"transposed_df = transposed_df.withColumnRenamed(\"CouIndicatorsntries\", \"Category\")\r\n",
					"\r\n",
					"# Transpose the DataFrame\r\n",
					"transposed_df = df.select(\"Indicators\", F.expr(stack_expr)).where(\"Value is not null\")\r\n",
					"\r\n",
					"transposed_df = transposed_df.drop(*[transposed_df.columns[0]] ) \r\n",
					"\r\n",
					"transposed_df.show(24)\r\n",
					""
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## UK NET Migration"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.sql(\"SELECT * FROM `default`.`uknetmigration` where Time > 1999\")\r\n",
					"df = df.drop(*[df.columns[0]] ) \r\n",
					"df.show(24)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## UK population by age"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"\r\n",
					"import matplotlib.pyplot as plt\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"# SQL query to select the data\r\n",
					"sql = \"SELECT `Age`, `2000`, `2001`, `2002`, `2003`, `2004`, `2005`, `2006`, `2007`, `2008`, `2009`, `2010`, `2011`, `2012`, `2013`, `2014`, `2015`, `2016`, `2017`, `2018`, `2019`, `2020`, `2021`, `2022` FROM ukpopulation_byage_total WHERE Age < 90\"\r\n",
					"\r\n",
					"# Execute the query and get the DataFrame\r\n",
					"df = spark.sql(sql)\r\n",
					"\r\n",
					"# Show the DataFrame\r\n",
					"df.show(10, False)\r\n",
					"\r\n",
					"# Convert the Spark DataFrame to a Pandas DataFrame\r\n",
					"pdf = df.toPandas()\r\n",
					"\r\n",
					"# Set the Age column as the index\r\n",
					"pdf.set_index('Age', inplace=True)\r\n",
					"\r\n",
					"# Transpose the DataFrame to have years as rows and ages as columns\r\n",
					"df_transposed = pdf.T\r\n",
					"\r\n",
					"# Convert all column values to numeric (float or int)\r\n",
					"df_transposed = df_transposed.apply(lambda x: pd.to_numeric(x.str.replace(',', ''), errors='coerce'))\r\n",
					"\r\n",
					"\r\n",
					"# Plot the graph\r\n",
					"plt.figure(figsize=(15, 10))\r\n",
					"# Plot a subset of the data (e.g., every 5th age group)\r\n",
					"for age in df_transposed.columns[::5]:\r\n",
					"    plt.plot(df_transposed.index.astype(str), df_transposed[age], label=f'Age {age}')\r\n",
					"\r\n",
					"# Add grid lines\r\n",
					"plt.grid(True)\r\n",
					"\r\n",
					"# Add title and labels\r\n",
					"plt.title('Population by Age Across Years')\r\n",
					"plt.xlabel('Year')\r\n",
					"plt.ylabel('Population')\r\n",
					"plt.legend()\r\n",
					"plt.show()\r\n",
					"\r\n",
					""
				],
				"execution_count": 39
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## World health data"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"resultDF = spark.sql('SELECT year,health_exp as health_exp_percentage_gdp,life_expect, maternal_mortality,infant_mortality,neonatal_mortality, under_5_mortality   FROM `default`.`worldhealthdata` where country_code = \"GBR\" and year > 1999 and  year < 2023')\r\n",
					"resultDF.show(24)\r\n",
					"\r\n",
					"schema_name = 'warehouse'\r\n",
					"table_name = 'uk_health_data'\r\n",
					"\r\n",
					"spark_sql_schema_Create = f\"CREATE SCHEMA IF NOT EXISTS {schema_name};\"\r\n",
					"spark.sql(spark_sql_schema_Create)\r\n",
					"\r\n",
					"resultDF.write.format(\"delta\").mode(\"ignore\").saveAsTable(f\"{schema_name}.{table_name}\")"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"source": [
					"df = spark.sql(\"SHOW schemas;\")\r\n",
					"df.show()"
				],
				"execution_count": 15
			}
		]
	}
}